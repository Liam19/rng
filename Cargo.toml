[package]
name = "rng"
version = "0.1.0"
edition = "2024"

[features]
fuzz = []

[profile.dev]
opt-level = 1
incremental = true

[profile.dev.package."*"]
opt-level = 3

[profile.release]
lto = "thin"
codegen-units = 1
strip = "symbols"
opt-level = 3
incremental = true
debug = false

[dependencies]
fuzz_derive = { version = "0.1.0", path = "./fuzz_derive", optional = false } # Change to true

getrandom = "0.3.3"

# # -------- LINTS ---------

# [lints.rust]
# # Permanent 
# unused_variables = "allow"
# unused_imports = "allow"
# unused_mut = "allow"
# dead_code = "allow"

# missing_docs = "warn"
# future-incompatible = "warn"
# keyword-idents = "warn"
# redundant-lifetimes = "warn"
# trivial-casts = "warn"
# trivial-numeric-casts = "warn"

# # Possible false-positives
# meta-variable-misuse = "warn"
# unit-bindings = "warn"
# unsafe-code = "warn"
# unused-lifetimes = "warn"
# unused-qualifications = "warn"
# deprecated = "warn"

# duplicate-macro-attributes = "deny"
# inline-no-sanitize = "deny"
# irrefutable-let-patterns = "deny"
# named-arguments-used-positionally = "deny"
# trivial-bounds = "deny"

# # Optional/Noisy/false positives
# # single-use-lifetimes = "warn"
# # unused-results = "warn"
# # variant-size-differences = "warn"
# # redundant-imports = "warn"
# # missing-copy-implementations = "warn"
# # missing-debug-implementations = "warn"
# # unreachable-pub = "warn"

# [lints.clippy]
# # Permanent:
# too_many_arguments = "allow"
# type_complexity = "allow"
# new_without_default = "allow"

# # allow_attributes = "warn"
# allow_attributes_without_reason = "warn"
# # index_into_vector = "warn" # Unknown
# copy_iterator = "warn"
# explicit_into_iter_loop = "warn"
# filter_map_next = "warn"
# flat_map_option = "warn"
# map_unwrap_or = "warn"
# bool_to_int_with_if = "warn"
# cloned_instead_of_copied = "warn"
# enum_variant_names = "warn"
# default_trait_access = "warn"
# doc_link_with_quotes = "warn"
# expl_impl_clone_on_copy = "warn"
# unneeded_field_pattern = "warn"
# ref_binding_to_reference = "warn"
# ref_option_ref = "warn"
# return_self_not_must_use = "warn"
# str_split_at_newline = "warn"
# struct_field_names = "warn"
# trivially_copy_pass_by_ref = "warn"
# unchecked_duration_subtraction = "warn"
# unnecessary_box_returns = "warn"
# mismatching_type_param_order = "warn"
# mut_mut = "warn"
# needless_bitwise_bool = "warn"
# needless_continue = "warn"
# needless_for_each = "warn"
# no_effect_underscore_binding = "warn"
# option_as_ref_cloned = "warn"
# pub_underscore_fields = "warn"
# ref_option = "warn"
# unnecessary_wraps = "warn"
# unnested_or_patterns = "warn"
# unused_self = "warn"
# zero_sized_map_values = "warn"
# redundant_type_annotations = "warn"
# lossy_float_literal = "warn"
# renamed_function_params = "warn"
# string_to_string = "warn"
# std_instead_of_core = "warn"
# redundant_clone = "warn"
# nonminimal_bool = "warn"
# cognitive_complexity = "warn"
# equatable_if_let = "warn"
# iter_on_single_items = "warn"
# iter_with_drain = "warn"
# needless_pass_by_ref_mut = "warn"
# redundant_pub_crate = "warn"
# suboptimal_flops = "warn"
# too_long_first_doc_paragraph = "warn"
# unused_peekable = "warn"
# unused_rounding = "warn"
# collapsible_if = "warn"
# if_not_else = "warn"
# implicit_clone = "warn"
# inconsistent_struct_constructor = "warn"
# inefficient_to_string = "warn"
# iter_filter_is_ok = "warn"
# iter_filter_is_some = "warn"
# iter_not_returning_iterator = "warn"
# large_stack_arrays = "warn"
# large_types_passed_by_value = "warn"
# manual_assert = "warn"
# manual_is_power_of_two = "warn"
# manual_is_variant_and = "warn"
# manual_let_else = "warn"
# manual_ok_or = "warn"
# manual_string_new = "warn"
# suspicious_arithmetic_impl = "warn"
# suspicious_assignment_formatting = "warn"
# suspicious_else_formatting = "warn"
# suspicious_map = "warn"
# suspicious_op_assign_impl = "warn"
# suspicious_operation_groupings = "warn"
# suspicious_to_owned = "warn"
# suspicious_unary_op_formatting = "warn"
# uninlined_format_args = "warn"
# assigning_clones = "warn"
# missing_inline_in_public_items = "warn"
# semicolon_if_nothing_returned = "warn"
# tests_outside_test_module = "warn"
# empty_line_after_doc_comments = "warn"
# needless_collect = "warn"
# unreadable_literal = "warn"

# # TODO:
# # as_conversions = "warn"
# # get_unwrap = "warn" # use once proper error handling is implemented
# match_on_vec_items = "warn" # use once proper error handling is implemented
# # collection_is_never_read = "warn"

# # Optional/Noisy
# # wildcard_enum_match_arm = "warn"
# # match_same_arms = "warn"
# # similar_names = "warn"
# # unwrap_used = "warn"
# # if_then_some_else_none = "warn"
# # struct_excessive_bools = "warn"
# # fn_params_excessive_bools = "warn"
# # float_cmp = "warn" # needs testing
# # missing_const_for_fn = "warn" # false positives with systems
# # same_name_method = "warn"
# # ? - add allow attribute when discarding the remainder is purposeful 
# # integer_division = "warn"
# # wildcard_imports = "warn"
# # missing_panics_doc = "warn"
# # redundant_closure_for_method_calls = "warn"

# # ! Unknown lints:
# # unnecessary_literal_bound = "warn"
# # allow-mixed-uninlined-format-args = "warn"
